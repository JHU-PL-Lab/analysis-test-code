# This test illustrates that when list_fold_left is ran on two dynamically created lists
# with the same function, kPLUME will be confused but SPLUME will not.

zero = 0;
one = 1;

# This function checks whether the accumulator and the list item are integers;
# if both are, add them together. If one of them isn't an int, return empty
# set to signify type error
fun_1 = fun accumulator ->
(
  blub_0 = fun item ->
  (
    fun_1_res = item~int?
             fun match_int ->
                (res_match_int = accumulator~int?
                  fun acc_match_int -> (correct_type = accumulator + item) :
                  fun acc_antimatch_int -> (wrong_type = {};)
                ):
             fun antimatch_int -> (res_antimatch_int = {};);
  );
);

# A function that generates a list, taking in itself (to recurse),
# the element that goes into the list, and how long the list is

list_maker = fun lm_self ->
(
  blub_1 = fun element ->
  (
    blub_2 = fun length ->
    (
      is_zero = length == zero;
      list_so_far = is_zero~true?
      fun tru -> (empty = {empty = zero}):
      fun fal -> (lm_self2_part1 = lm_self lm_self;
                  lm_self2_part2 = lm_self2_part1 element;
                  length_of_rest = length - one;
                  rest = lm_self2_part2 length_of_rest;
                  new_list = {head = element, tail = rest};
      );
    );
  );
);

list_maker_2 = fun lm_self_2 ->
(
  blub_1_2 = fun element_2 ->
  (
    blub_2_2 = fun length_2 ->
    (
      is_zero_2 = length_2 == zero;
      list_so_far_2 = is_zero_2~true?
      fun tru_2 -> (empty_2 = {empty = zero}):
      fun fal_2 -> (lm_self2_part1_2 = lm_self_2 lm_self_2;
                  lm_self2_part2_2 = lm_self2_part1_2 element_2;
                  length_of_rest_2 = length_2 - one;
                  rest_2 = lm_self2_part2_2 length_of_rest_2;
                  new_list_2 = {head = element_2, tail = rest_2};
      );
    );
  );
);

# The equivalent of a List.fold_left function
list_folder = fun lf_self ->
(
  blub_3 = fun the_function ->
  (
    blub_4 = fun acc ->
    (
      blub_5 = fun the_list ->
      (
          blub_6 = the_list~{empty = any}?
          # the list is empty. abort
          fun tr -> (blub_7 = acc):
          # the list is not empty, so we need to apply the
          fun fl -> (lf_head = the_list.head;
                     part_1 = the_function acc;
                     new_acc = part_1 lf_head;
                     the_rest = the_list.tail;
                     lf_self1_part1 = lf_self lf_self;
                     lf_self1_part2 = lf_self1_part1 the_function;
                     lf_self1_part3 = lf_self1_part2 new_acc;
                     lf_self1_part4 = lf_self1_part3 the_rest
          );
      );
    );
  );
);

elm_int = 1;
elm_bool = true;
acc1 = 0;
acc2 = 1;
len = 5;

list_maker_semi_real = list_maker list_maker;
list_maker_semi_real_2 = list_maker_2 list_maker_2;
list_maker_for_int = list_maker_semi_real elm_int;
list_maker_for_bool = list_maker_semi_real_2 elm_bool;

# list_1 is a list of booleans
list_1 = list_maker_for_bool len;
# list_2 is a list of integers
list_2 = list_maker_for_int len;

# pass fold into itself
list_fold = list_folder list_folder;

# pass function into list_fold
list_fold_w_fun = list_fold fun_1;

# pass the accumulator that corresponds with the first list with the fun
list_fold_w_acc_1 = list_fold_w_fun acc1;

# pass the boolean list into list_fold; should produce an empty set
list_fold_go_1 = list_fold_w_acc_1 list_1;

# pass the corresponding accumulator with the second list
list_fold_w_acc_2 = list_fold_w_fun acc2;

# pass the integer list into list_fold; should produce an integer result
list_fold_go_2 = list_fold_w_acc_2 list_2;
